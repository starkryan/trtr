import apiClient from './apiClient';
import auth from '@react-native-firebase/auth';

export interface ReportRequest {
  characterId: string;
  messageContent: string;
  reason: string;
  details?: string;
  metadata?: {
    messageId?: string;
    messageTimestamp?: Date;
    conversationId?: string;
    appVersion?: string;
    deviceInfo?: string;
  };
}

export interface ReportResponse {
  status: string;
  message: string;
  reportId: string;
}

/**
 * Report an offensive message generated by an AI character
 * @param reportData - Data for the report submission
 * @returns Report submission response
 */
export const reportMessage = async (reportData: ReportRequest): Promise<ReportResponse> => {
  try {
    // Get the current Firebase user (anonymous or signed in)
    const currentUser = auth().currentUser;
    
    // Add Firebase authentication headers
    const headers: Record<string, string> = {};
    
    if (currentUser) {
      // For anonymous users, pass the UID as firebase-id
      headers['firebase-id'] = currentUser.uid;
      
      // If user is not anonymous, also get the token
      if (!currentUser.isAnonymous) {
        const token = await currentUser.getIdToken();
        headers['firebase-token'] = token;
      }
    }
    
    const response = await apiClient.post('/reports', reportData, { headers });
    return response.data;
  } catch (error: any) {
    console.error('Error reporting message:', error);
    
    if (error.response) {
      throw new Error(error.response.data.message || 'Failed to submit report');
    }
    
    throw new Error('Network error - please check your connection and try again');
  }
};

/**
 * Get report status by ID
 * @param reportId - ID of the report to check
 * @returns Report status information
 */
export const getReportStatus = async (reportId: string): Promise<any> => {
  try {
    // Get the current Firebase user (anonymous or signed in)
    const currentUser = auth().currentUser;
    
    // Add Firebase authentication headers
    const headers: Record<string, string> = {};
    
    if (currentUser) {
      // For anonymous users, pass the UID as firebase-id
      headers['firebase-id'] = currentUser.uid;
      
      // If user is not anonymous, also get the token
      if (!currentUser.isAnonymous) {
        const token = await currentUser.getIdToken();
        headers['firebase-token'] = token;
      }
    }
    
    const response = await apiClient.get(`/reports/${reportId}/status`, { headers });
    return response.data;
  } catch (error: any) {
    console.error('Error fetching report status:', error);
    throw error;
  }
};

export default {
  reportMessage,
  getReportStatus
}; 